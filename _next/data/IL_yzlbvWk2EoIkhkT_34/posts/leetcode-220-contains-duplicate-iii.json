{"pageProps":{"postData":{"toc":[{"indentLevel":3,"link":"#understanding-problem-statement","headerRef":"h_0","title":"Understanding problem statement"},{"indentLevel":3,"link":"#constructing-the-solution","headerRef":"h_1","title":"Constructing the solution"}],"slug":"leetcode-220-contains-duplicate-iii","source":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://leetcode.com/problems/contains-duplicate-iii/\"\n  }, \"https://leetcode.com/problems/contains-duplicate-iii/\")), mdx(\"h3\", {\n    \"id\": \"understanding-problem-statement\",\n    \"className\": \"header\",\n    \"header-ref\": \"h_0\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#understanding-problem-statement\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"icon icon-link\"\n  })), \"Understanding problem statement\"), mdx(\"p\", null, \"This problem specifies, for each element, by definition its surroundings (elements bounded by k window size), if any of the difference (between itself and its surroundings) yield a value of not greater than t, return true, otherwise return false. \"), mdx(\"h3\", {\n    \"id\": \"constructing-the-solution\",\n    \"className\": \"header\",\n    \"header-ref\": \"h_1\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#constructing-the-solution\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"icon icon-link\"\n  })), \"Constructing the solution\"), mdx(\"p\", null, \"We might be tempted to iterate through each element, going through its surroundings to check for the conditions. However, this will arrive to a solution that has complexity of O(n*k).\"), mdx(\"p\", null, \"Some speedup can be achieved if we get the sorted array and skip those elements that yields difference more than t.\"), mdx(\"p\", null, \"Intuition: If we sort the array, we would effectively know the region (indicated by left and right pivots) that would satisfy t difference criteria. Let say we left and right pivots is yielding difference greater than t, since the right pivot will be pointing at a greater value, by moving the left pivot to right, we might miminize the difference hence satisfy the condition.\"), mdx(\"p\", null, \"After the less than t difference is satisfied, we check the corresponding index in the original array, making sure that the distance between the indices in below k.\"), mdx(\"pre\", {\n    \"className\": \"language-java\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"class\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"Solution\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"{\"), \"\\n    \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"public\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"boolean\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-blue\"\n  }, \"containsNearbyAlmostDuplicate\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"int\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"[\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"]\"), \" nums\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \",\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"int\"), \" k\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \",\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"int\"), \" t\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \")\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"{\"), \"\\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-gray-400\"\n  }, \"// k indicates the window size\"), \"\\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-gray-400\"\n  }, \"// t indicates the difference that it must satisfy\"), \"\\n       \\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"Integer\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"[\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"]\"), \" ord \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"=\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"new\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"Integer\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"[\"), \"nums\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \".\"), \"length\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"]\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \";\"), \"\\n        \\n        \\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"for\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"int\"), \" i\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"=\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"0\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \";\"), \" i\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"<\"), \"nums\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \".\"), \"length\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \";\"), \" i\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"++\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \")\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"{\"), \"\\n            ord\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"[\"), \"i\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"]\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"=\"), \" i\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \";\"), \"\\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"}\"), \"\\n        \\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"Arrays\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \".\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-blue\"\n  }, \"sort\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"(\"), \"ord\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \",\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"(\"), \"a\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \",\"), \"b\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"->\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"Integer\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \".\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-blue\"\n  }, \"compare\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"(\"), \"nums\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"[\"), \"a\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"]\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \",\"), \" nums\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"[\"), \"b\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"]\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \";\"), \"\\n        \\n\\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"int\"), \" left \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"=\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"0\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \";\"), \"\\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"int\"), \" right \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"=\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"1\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \";\"), \"\\n        \\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"while\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"(\"), \"right\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"<\"), \"nums\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \".\"), \"length\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \")\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"{\"), \"        \\n            \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-gray-400\"\n  }, \"// this will get us the actual value nums[ord[i]]\"), \"\\n            \\n            \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-gray-400\"\n  }, \"// move the left pivot if it produces diff larger than t \"), \"\\n            \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"if\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"long\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \")\"), \" nums\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"[\"), \"ord\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"[\"), \"right\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"]\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"]\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"-\"), \"nums\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"[\"), \"ord\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"[\"), \"left\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"]\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"]\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \">\"), \" t\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \")\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"{\"), \"\\n                left\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"++\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \";\"), \"\\n                \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-gray-400\"\n  }, \"// left pivot cannot be at the same position as right pivot\"), \"\\n                \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"if\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"(\"), \"left \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"==\"), \" right\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \")\"), \" right\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"++\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \";\"), \"\\n                \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"continue\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \";\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-gray-400\"\n  }, \"// we only move the left pivot once, it might still not satisfy the condition\"), \"\\n            \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"}\"), \"\\n            \\n            \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-gray-400\"\n  }, \"// after the above, we ensure that the region between left and right pivot satisfy the t condition\"), \"\\n            \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-gray-400\"\n  }, \"// hence what we need to do next is to while fixing right pivot\"), \"\\n            \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-gray-400\"\n  }, \"// find any index from the left that satisfy k condition\"), \"\\n            \\n            \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-gray-400\"\n  }, \"// we introduce another temp pivot that moves from left pivot to right pivot\"), \"\\n            \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"int\"), \" temp \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"=\"), \" left\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \";\"), \"\\n            \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"while\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"(\"), \"temp \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"<\"), \" right\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \")\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"{\"), \"\\n                \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"if\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"Math\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \".\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-blue\"\n  }, \"abs\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"(\"), \"ord\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"[\"), \"temp\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"]\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"-\"), \"ord\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"[\"), \"right\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"]\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \")\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"<=\"), \" k\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \")\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"return\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-red\"\n  }, \"true\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \";\"), \"\\n                temp\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"++\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \";\"), \"\\n            \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"}\"), \"\\n            \\n            right\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"++\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \";\"), \"\\n            \\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"}\"), \"\\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"return\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-red\"\n  }, \"false\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \";\"), \"\\n    \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"}\"), \"\\n\\n    \\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"}\"), \"\\n\")));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://leetcode.com/problems/contains-duplicate-iii/\">https://leetcode.com/problems/contains-duplicate-iii/</a></p><h3 id=\"understanding-problem-statement\" class=\"header\" header-ref=\"h_0\"><a href=\"#understanding-problem-statement\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>Understanding problem statement</h3><p>This problem specifies, for each element, by definition its surroundings (elements bounded by k window size), if any of the difference (between itself and its surroundings) yield a value of not greater than t, return true, otherwise return false. </p><h3 id=\"constructing-the-solution\" class=\"header\" header-ref=\"h_1\"><a href=\"#constructing-the-solution\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>Constructing the solution</h3><p>We might be tempted to iterate through each element, going through its surroundings to check for the conditions. However, this will arrive to a solution that has complexity of O(n*k).</p><p>Some speedup can be achieved if we get the sorted array and skip those elements that yields difference more than t.</p><p>Intuition: If we sort the array, we would effectively know the region (indicated by left and right pivots) that would satisfy t difference criteria. Let say we left and right pivots is yielding difference greater than t, since the right pivot will be pointing at a greater value, by moving the left pivot to right, we might miminize the difference hence satisfy the condition.</p><p>After the less than t difference is satisfied, we check the corresponding index in the original array, making sure that the distance between the indices in below k.</p><pre class=\"language-java\"><code class=\"language-java\"><span class=\"text-code-purple\">class</span> <span class=\"\">Solution</span> <span class=\"text-code-white\">{</span>\n    <span class=\"text-code-purple\">public</span> <span class=\"text-code-purple\">boolean</span> <span class=\"text-code-blue\">containsNearbyAlmostDuplicate</span><span class=\"text-code-white\">(</span><span class=\"text-code-purple\">int</span><span class=\"text-code-white\">[</span><span class=\"text-code-white\">]</span> nums<span class=\"text-code-white\">,</span> <span class=\"text-code-purple\">int</span> k<span class=\"text-code-white\">,</span> <span class=\"text-code-purple\">int</span> t<span class=\"text-code-white\">)</span> <span class=\"text-code-white\">{</span>\n        <span class=\"text-gray-400\">// k indicates the window size</span>\n        <span class=\"text-gray-400\">// t indicates the difference that it must satisfy</span>\n       \n        <span class=\"\">Integer</span><span class=\"text-code-white\">[</span><span class=\"text-code-white\">]</span> ord <span class=\"\">=</span> <span class=\"text-code-purple\">new</span> <span class=\"\">Integer</span><span class=\"text-code-white\">[</span>nums<span class=\"text-code-white\">.</span>length<span class=\"text-code-white\">]</span><span class=\"text-code-white\">;</span>\n        \n        \n        <span class=\"text-code-purple\">for</span> <span class=\"text-code-white\">(</span><span class=\"text-code-purple\">int</span> i<span class=\"\">=</span><span class=\"\">0</span><span class=\"text-code-white\">;</span> i<span class=\"\">&lt;</span>nums<span class=\"text-code-white\">.</span>length<span class=\"text-code-white\">;</span> i<span class=\"\">++</span><span class=\"text-code-white\">)</span> <span class=\"text-code-white\">{</span>\n            ord<span class=\"text-code-white\">[</span>i<span class=\"text-code-white\">]</span> <span class=\"\">=</span> i<span class=\"text-code-white\">;</span>\n        <span class=\"text-code-white\">}</span>\n        \n        <span class=\"\">Arrays</span><span class=\"text-code-white\">.</span><span class=\"text-code-blue\">sort</span><span class=\"text-code-white\">(</span>ord<span class=\"text-code-white\">,</span> <span class=\"text-code-white\">(</span>a<span class=\"text-code-white\">,</span>b<span class=\"text-code-white\">)</span><span class=\"\">-&gt;</span><span class=\"\">Integer</span><span class=\"text-code-white\">.</span><span class=\"text-code-blue\">compare</span><span class=\"text-code-white\">(</span>nums<span class=\"text-code-white\">[</span>a<span class=\"text-code-white\">]</span><span class=\"text-code-white\">,</span> nums<span class=\"text-code-white\">[</span>b<span class=\"text-code-white\">]</span><span class=\"text-code-white\">)</span><span class=\"text-code-white\">)</span><span class=\"text-code-white\">;</span>\n        \n\n        <span class=\"text-code-purple\">int</span> left <span class=\"\">=</span> <span class=\"\">0</span><span class=\"text-code-white\">;</span>\n        <span class=\"text-code-purple\">int</span> right <span class=\"\">=</span> <span class=\"\">1</span><span class=\"text-code-white\">;</span>\n        \n        <span class=\"text-code-purple\">while</span> <span class=\"text-code-white\">(</span>right<span class=\"\">&lt;</span>nums<span class=\"text-code-white\">.</span>length<span class=\"text-code-white\">)</span> <span class=\"text-code-white\">{</span>        \n            <span class=\"text-gray-400\">// this will get us the actual value nums[ord[i]]</span>\n            \n            <span class=\"text-gray-400\">// move the left pivot if it produces diff larger than t </span>\n            <span class=\"text-code-purple\">if</span> <span class=\"text-code-white\">(</span><span class=\"text-code-white\">(</span><span class=\"text-code-purple\">long</span><span class=\"text-code-white\">)</span> nums<span class=\"text-code-white\">[</span>ord<span class=\"text-code-white\">[</span>right<span class=\"text-code-white\">]</span><span class=\"text-code-white\">]</span><span class=\"\">-</span>nums<span class=\"text-code-white\">[</span>ord<span class=\"text-code-white\">[</span>left<span class=\"text-code-white\">]</span><span class=\"text-code-white\">]</span> <span class=\"\">&gt;</span> t<span class=\"text-code-white\">)</span> <span class=\"text-code-white\">{</span>\n                left<span class=\"\">++</span><span class=\"text-code-white\">;</span>\n                <span class=\"text-gray-400\">// left pivot cannot be at the same position as right pivot</span>\n                <span class=\"text-code-purple\">if</span> <span class=\"text-code-white\">(</span>left <span class=\"\">==</span> right<span class=\"text-code-white\">)</span> right<span class=\"\">++</span><span class=\"text-code-white\">;</span>\n                <span class=\"text-code-purple\">continue</span><span class=\"text-code-white\">;</span> <span class=\"text-gray-400\">// we only move the left pivot once, it might still not satisfy the condition</span>\n            <span class=\"text-code-white\">}</span>\n            \n            <span class=\"text-gray-400\">// after the above, we ensure that the region between left and right pivot satisfy the t condition</span>\n            <span class=\"text-gray-400\">// hence what we need to do next is to while fixing right pivot</span>\n            <span class=\"text-gray-400\">// find any index from the left that satisfy k condition</span>\n            \n            <span class=\"text-gray-400\">// we introduce another temp pivot that moves from left pivot to right pivot</span>\n            <span class=\"text-code-purple\">int</span> temp <span class=\"\">=</span> left<span class=\"text-code-white\">;</span>\n            <span class=\"text-code-purple\">while</span><span class=\"text-code-white\">(</span>temp <span class=\"\">&lt;</span> right<span class=\"text-code-white\">)</span> <span class=\"text-code-white\">{</span>\n                <span class=\"text-code-purple\">if</span> <span class=\"text-code-white\">(</span><span class=\"\">Math</span><span class=\"text-code-white\">.</span><span class=\"text-code-blue\">abs</span><span class=\"text-code-white\">(</span>ord<span class=\"text-code-white\">[</span>temp<span class=\"text-code-white\">]</span><span class=\"\">-</span>ord<span class=\"text-code-white\">[</span>right<span class=\"text-code-white\">]</span><span class=\"text-code-white\">)</span> <span class=\"\">&lt;=</span> k<span class=\"text-code-white\">)</span> <span class=\"text-code-purple\">return</span> <span class=\"text-code-red\">true</span><span class=\"text-code-white\">;</span>\n                temp<span class=\"\">++</span><span class=\"text-code-white\">;</span>\n            <span class=\"text-code-white\">}</span>\n            \n            right<span class=\"\">++</span><span class=\"text-code-white\">;</span>\n            \n        <span class=\"text-code-white\">}</span>\n        <span class=\"text-code-purple\">return</span> <span class=\"text-code-red\">false</span><span class=\"text-code-white\">;</span>\n    <span class=\"text-code-white\">}</span>\n\n    \n<span class=\"text-code-white\">}</span>\n</code></pre>","scope":{}},"wordCount":392,"readingTime":2,"title":"Leetcode 220: Contains Duplicate III","section":"blog","date":"2021-07-04","tags":["Leetcode","Sliding Window"]}},"__N_SSG":true}