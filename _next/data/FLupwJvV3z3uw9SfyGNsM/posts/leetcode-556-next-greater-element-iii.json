{"pageProps":{"postData":{"toc":[{"indentLevel":3,"link":"#understanding-the-problem-statement","headerRef":"h_0","title":"Understanding the problem statement"},{"indentLevel":3,"link":"#constructing-the-solution","headerRef":"h_1","title":"Constructing the solution"}],"slug":"leetcode-556-next-greater-element-iii","source":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://leetcode.com/problems/next-greater-element-iii/\"\n  }, \"https://leetcode.com/problems/next-greater-element-iii/\")), mdx(\"h3\", {\n    \"id\": \"understanding-the-problem-statement\",\n    \"className\": \"header\",\n    \"header-ref\": \"h_0\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#understanding-the-problem-statement\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"icon icon-link\"\n  })), \"Understanding the problem statement\"), mdx(\"p\", null, \"Can we possibly rearrange the order of the number digits and yield a number that is greater. If there are multiple arrangements that satisfy such condition, return the smallest of these.  \"), mdx(\"h3\", {\n    \"id\": \"constructing-the-solution\",\n    \"className\": \"header\",\n    \"header-ref\": \"h_1\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#constructing-the-solution\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"icon icon-link\"\n  })), \"Constructing the solution\"), mdx(\"p\", null, \"Let's go through some simple example before going for the solution,\"), mdx(\"p\", null, \"Given that we have number input of 12, its next greater integer will be 21. Its next greater element can be obtained by swapping two digits around. \"), mdx(\"p\", null, \"Now looks at another example, given integer input of 21, what is its next greater integer, can we do the same as the example before? If we swap the digits, we will get integer which is smaller, 12 in this case, This is not what we want, so the output is -1 to indicate absentee. An integer with decreasing digits value is not reorderable. Any attempt to reorder such integers will yield smaller integers. \"), mdx(\"p\", null, \"What we can derive from this is that swapping the digits if the integers digits going in a decreasing order fashion would not get us the next greater integer. We can't do this as it already the greatest of all permutations.\"), mdx(\"p\", null, \"Ok, now let's look at another example, let's say we have another input of 312, its next greater integer is 321. Do you notice something? We have explored 12 as input in the first example, to get next integer of 321, we are doing the same thing as swapping digits 1 and 2, the digit 3 is left undisturbed. The digit 3 is largest in this integer, if we ever moves this digit to the right, we will end up getting smaller integer. \"), mdx(\"p\", null, \"To obtain the next greater integer, we should try our best to reorder the rightmost part of the integers. This is because digits at the leftmost digits are much more significant. The intuition is to identify section that is \\\"reorderable\\\" so that we can reorder to get next greater integer.\"), mdx(\"p\", null, \"To identify this section is simple, as mentioned before, a decreasing order section cannot be reordered to produce greater integer. We scan from righmost part of the integer and stop when the decreasing order pattern starts to break. We can reorder when this pattern breaks. This position will serves as left pivot of the reorder section.\"), mdx(\"p\", null, \"If cannot find such left pivot, then it means the digits are decreasing in value, like 321 is not reorderable.\"), mdx(\"p\", null, \"This is only part of story, now we have identify the section, how can we reorder to get the next greater integer.\"), mdx(\"p\", null, \"Now, we have another integer of 1234876, the left pivot will be positioned at digit 4\"), mdx(\"pre\", {\n    \"className\": \"language-plain\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-plain\",\n    \"metastring\": \"text\",\n    \"text\": true\n  }, \"1 2 3 4 8 7 6\\n      ^     \\n_ _ _ _ _ _ _\\n\")), mdx(\"p\", null, \"We need to identify a digit from the rightmost part so that we can swap with it. Because the left pivot is positioned at index that the decreasing pattern stops, it is guaranteed to have a digit which the value is greater. This digit must be sufficiently greater than the left pivot value but the small enough to give next greater element. After that, we swap this digit with the left pivot digit. \"), mdx(\"p\", null, \"We have a greater element, because the section right to the left pivot is in decreasing order, this will not be our next greater value. Hence, we reverse the order this section. This will gives us its smallest possible reordered integer section. This is precisely the next greater integer that we intend to find.\"), mdx(\"pre\", {\n    \"className\": \"language-java\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"class\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"Solution\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"{\"), \"\\n    \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"public\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"int\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-blue\"\n  }, \"nextGreaterElement\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"int\"), \" num\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \")\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"{\"), \"\\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"char\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"[\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"]\"), \" cArr \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"=\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"String\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \".\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-blue\"\n  }, \"valueOf\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"(\"), \"num\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \".\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-blue\"\n  }, \"toCharArray\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \";\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-gray-400\"\n  }, \"// convert to char array\"), \"\\n        \\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-gray-400\"\n  }, \"// finding the next greater integer is like finding greater integer with the least effort\"), \"\\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"int\"), \" i \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"=\"), \" cArr\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \".\"), \"length\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"-\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"1\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \";\"), \"\\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"int\"), \" n \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"=\"), \" cArr\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \".\"), \"length\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \";\"), \"\\n        \\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-gray-400\"\n  }, \"// find the index when decreasing order breaks \"), \"\\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-gray-400\"\n  }, \"// Example: 2, 3, 3, 5, 4\"), \"\\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-gray-400\"\n  }, \"//                   i (stop here)\"), \"\\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"while\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"(\"), \"i\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"-\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"1\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \">=\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"0\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"&&\"), \" cArr\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"[\"), \"i\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"-\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"1\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"]\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \">=\"), \" cArr\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"[\"), \"i\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"]\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \")\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"{\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-gray-400\"\n  }, \"// i-1 lookbackward\"), \"\\n            i\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"--\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \";\"), \"\\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"}\"), \"\\n\\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-gray-400\"\n  }, \"// if all of its digits are arranged in decreasing order, a solution wouldn't exist \"), \"\\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"if\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"(\"), \"i\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"==\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"0\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \")\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"return\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"-\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"1\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \";\"), \"\\n        \\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-gray-400\"\n  }, \"// starting from position i, we look for element at the furthest right which is greater than cArr[i-1]\"), \"\\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-gray-400\"\n  }, \"// we need the smallest but greater value than cArr[i-1]\"), \"\\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"int\"), \" j \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"=\"), \" i\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \";\"), \"\\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-gray-400\"\n  }, \"// Example: 2, 3, 3, 5, 4\"), \"\\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-gray-400\"\n  }, \"//                      j (stop here)\"), \"\\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"while\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"(\"), \"j\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"+\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"1\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"<\"), \"n \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"&&\"), \" cArr\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"[\"), \"i\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"-\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"1\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"]\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"<\"), \" cArr\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"[\"), \"j\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"+\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"1\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"]\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \")\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"{\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-gray-400\"\n  }, \"// j+1 lookahead\"), \"\\n            j\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"++\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \";\"), \"\\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"}\"), \"\\n        \\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-gray-400\"\n  }, \"// swap cArr[j] and cArr[i-1]\"), \"\\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"char\"), \" temp \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"=\"), \" cArr\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"[\"), \"j\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"]\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \";\"), \"\\n        cArr\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"[\"), \"j\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"]\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"=\"), \" cArr\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"[\"), \"i\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"-\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"1\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"]\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \";\"), \"\\n        cArr\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"[\"), \"i\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"-\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"1\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"]\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"=\"), \" temp\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \";\"), \"\\n        \\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-gray-400\"\n  }, \"// we reverse the order because the right partition is in decreasing order\"), \"\\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-blue\"\n  }, \"reverse\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"(\"), \"cArr\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \",\"), \" i\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \",\"), \" n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"-\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"1\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \";\"), \"\\n        \\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"String\"), \" str \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"=\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"String\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \".\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-blue\"\n  }, \"valueOf\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"(\"), \"cArr\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \";\"), \"\\n        \\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"if\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"Long\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \".\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-blue\"\n  }, \"parseLong\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"(\"), \"str\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \")\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \">\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"Integer\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \".\"), \"MAX_VALUE\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \")\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"return\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"-\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"1\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \";\"), \"\\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"return\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"Integer\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \".\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-blue\"\n  }, \"parseInt\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"(\"), \"str\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \";\"), \"\\n    \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"}\"), \"\\n    \\n    \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-gray-400\"\n  }, \"// reverse array based on start and end position \"), \"\\n    \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"public\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"void\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-blue\"\n  }, \"reverse\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"char\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"[\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"]\"), \" input\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \",\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"int\"), \" start\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \",\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"int\"), \" end\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \")\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"{\"), \"\\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"while\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"(\"), \"end \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \">\"), \" start\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \")\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"{\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-gray-400\"\n  }, \"// both crosses\"), \"\\n            \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"char\"), \" temp \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"=\"), \" input\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"[\"), \"start\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"]\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \";\"), \"\\n            input\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"[\"), \"start\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"]\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"=\"), \" input\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"[\"), \"end\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"]\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \";\"), \"\\n            input\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"[\"), \"end\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"]\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"=\"), \" temp\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \";\"), \"\\n            start\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"++\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \";\"), \"\\n            end\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"--\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \";\"), \"\\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"}\"), \"\\n    \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"}\"), \"\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"}\"), \"\\n\")), mdx(\"br\", null));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://leetcode.com/problems/next-greater-element-iii/\">https://leetcode.com/problems/next-greater-element-iii/</a></p><h3 id=\"understanding-the-problem-statement\" class=\"header\" header-ref=\"h_0\"><a href=\"#understanding-the-problem-statement\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>Understanding the problem statement</h3><p>Can we possibly rearrange the order of the number digits and yield a number that is greater. If there are multiple arrangements that satisfy such condition, return the smallest of these.  </p><h3 id=\"constructing-the-solution\" class=\"header\" header-ref=\"h_1\"><a href=\"#constructing-the-solution\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>Constructing the solution</h3><p>Let&#x27;s go through some simple example before going for the solution,</p><p>Given that we have number input of 12, its next greater integer will be 21. Its next greater element can be obtained by swapping two digits around. </p><p>Now looks at another example, given integer input of 21, what is its next greater integer, can we do the same as the example before? If we swap the digits, we will get integer which is smaller, 12 in this case, This is not what we want, so the output is -1 to indicate absentee. An integer with decreasing digits value is not reorderable. Any attempt to reorder such integers will yield smaller integers. </p><p>What we can derive from this is that swapping the digits if the integers digits going in a decreasing order fashion would not get us the next greater integer. We can&#x27;t do this as it already the greatest of all permutations.</p><p>Ok, now let&#x27;s look at another example, let&#x27;s say we have another input of 312, its next greater integer is 321. Do you notice something? We have explored 12 as input in the first example, to get next integer of 321, we are doing the same thing as swapping digits 1 and 2, the digit 3 is left undisturbed. The digit 3 is largest in this integer, if we ever moves this digit to the right, we will end up getting smaller integer. </p><p>To obtain the next greater integer, we should try our best to reorder the rightmost part of the integers. This is because digits at the leftmost digits are much more significant. The intuition is to identify section that is &quot;reorderable&quot; so that we can reorder to get next greater integer.</p><p>To identify this section is simple, as mentioned before, a decreasing order section cannot be reordered to produce greater integer. We scan from righmost part of the integer and stop when the decreasing order pattern starts to break. We can reorder when this pattern breaks. This position will serves as left pivot of the reorder section.</p><p>If cannot find such left pivot, then it means the digits are decreasing in value, like 321 is not reorderable.</p><p>This is only part of story, now we have identify the section, how can we reorder to get the next greater integer.</p><p>Now, we have another integer of 1234876, the left pivot will be positioned at digit 4</p><pre class=\"language-plain\"><code class=\"language-plain\" metastring=\"text\">1 2 3 4 8 7 6\n      ^     \n_ _ _ _ _ _ _\n</code></pre><p>We need to identify a digit from the rightmost part so that we can swap with it. Because the left pivot is positioned at index that the decreasing pattern stops, it is guaranteed to have a digit which the value is greater. This digit must be sufficiently greater than the left pivot value but the small enough to give next greater element. After that, we swap this digit with the left pivot digit. </p><p>We have a greater element, because the section right to the left pivot is in decreasing order, this will not be our next greater value. Hence, we reverse the order this section. This will gives us its smallest possible reordered integer section. This is precisely the next greater integer that we intend to find.</p><pre class=\"language-java\"><code class=\"language-java\"><span class=\"text-code-purple\">class</span> <span class=\"\">Solution</span> <span class=\"text-code-white\">{</span>\n    <span class=\"text-code-purple\">public</span> <span class=\"text-code-purple\">int</span> <span class=\"text-code-blue\">nextGreaterElement</span><span class=\"text-code-white\">(</span><span class=\"text-code-purple\">int</span> num<span class=\"text-code-white\">)</span> <span class=\"text-code-white\">{</span>\n        <span class=\"text-code-purple\">char</span><span class=\"text-code-white\">[</span><span class=\"text-code-white\">]</span> cArr <span class=\"\">=</span> <span class=\"\">String</span><span class=\"text-code-white\">.</span><span class=\"text-code-blue\">valueOf</span><span class=\"text-code-white\">(</span>num<span class=\"text-code-white\">)</span><span class=\"text-code-white\">.</span><span class=\"text-code-blue\">toCharArray</span><span class=\"text-code-white\">(</span><span class=\"text-code-white\">)</span><span class=\"text-code-white\">;</span> <span class=\"text-gray-400\">// convert to char array</span>\n        \n        <span class=\"text-gray-400\">// finding the next greater integer is like finding greater integer with the least effort</span>\n        <span class=\"text-code-purple\">int</span> i <span class=\"\">=</span> cArr<span class=\"text-code-white\">.</span>length<span class=\"\">-</span><span class=\"\">1</span><span class=\"text-code-white\">;</span>\n        <span class=\"text-code-purple\">int</span> n <span class=\"\">=</span> cArr<span class=\"text-code-white\">.</span>length<span class=\"text-code-white\">;</span>\n        \n        <span class=\"text-gray-400\">// find the index when decreasing order breaks </span>\n        <span class=\"text-gray-400\">// Example: 2, 3, 3, 5, 4</span>\n        <span class=\"text-gray-400\">//                   i (stop here)</span>\n        <span class=\"text-code-purple\">while</span> <span class=\"text-code-white\">(</span>i<span class=\"\">-</span><span class=\"\">1</span><span class=\"\">&gt;=</span><span class=\"\">0</span> <span class=\"\">&amp;&amp;</span> cArr<span class=\"text-code-white\">[</span>i<span class=\"\">-</span><span class=\"\">1</span><span class=\"text-code-white\">]</span> <span class=\"\">&gt;=</span> cArr<span class=\"text-code-white\">[</span>i<span class=\"text-code-white\">]</span><span class=\"text-code-white\">)</span> <span class=\"text-code-white\">{</span> <span class=\"text-gray-400\">// i-1 lookbackward</span>\n            i<span class=\"\">--</span><span class=\"text-code-white\">;</span>\n        <span class=\"text-code-white\">}</span>\n\n        <span class=\"text-gray-400\">// if all of its digits are arranged in decreasing order, a solution wouldn&#x27;t exist </span>\n        <span class=\"text-code-purple\">if</span> <span class=\"text-code-white\">(</span>i<span class=\"\">==</span><span class=\"\">0</span><span class=\"text-code-white\">)</span> <span class=\"text-code-purple\">return</span> <span class=\"\">-</span><span class=\"\">1</span><span class=\"text-code-white\">;</span>\n        \n        <span class=\"text-gray-400\">// starting from position i, we look for element at the furthest right which is greater than cArr[i-1]</span>\n        <span class=\"text-gray-400\">// we need the smallest but greater value than cArr[i-1]</span>\n        <span class=\"text-code-purple\">int</span> j <span class=\"\">=</span> i<span class=\"text-code-white\">;</span>\n        <span class=\"text-gray-400\">// Example: 2, 3, 3, 5, 4</span>\n        <span class=\"text-gray-400\">//                      j (stop here)</span>\n        <span class=\"text-code-purple\">while</span> <span class=\"text-code-white\">(</span>j<span class=\"\">+</span><span class=\"\">1</span><span class=\"\">&lt;</span>n <span class=\"\">&amp;&amp;</span> cArr<span class=\"text-code-white\">[</span>i<span class=\"\">-</span><span class=\"\">1</span><span class=\"text-code-white\">]</span> <span class=\"\">&lt;</span> cArr<span class=\"text-code-white\">[</span>j<span class=\"\">+</span><span class=\"\">1</span><span class=\"text-code-white\">]</span><span class=\"text-code-white\">)</span> <span class=\"text-code-white\">{</span> <span class=\"text-gray-400\">// j+1 lookahead</span>\n            j<span class=\"\">++</span><span class=\"text-code-white\">;</span>\n        <span class=\"text-code-white\">}</span>\n        \n        <span class=\"text-gray-400\">// swap cArr[j] and cArr[i-1]</span>\n        <span class=\"text-code-purple\">char</span> temp <span class=\"\">=</span> cArr<span class=\"text-code-white\">[</span>j<span class=\"text-code-white\">]</span><span class=\"text-code-white\">;</span>\n        cArr<span class=\"text-code-white\">[</span>j<span class=\"text-code-white\">]</span> <span class=\"\">=</span> cArr<span class=\"text-code-white\">[</span>i<span class=\"\">-</span><span class=\"\">1</span><span class=\"text-code-white\">]</span><span class=\"text-code-white\">;</span>\n        cArr<span class=\"text-code-white\">[</span>i<span class=\"\">-</span><span class=\"\">1</span><span class=\"text-code-white\">]</span> <span class=\"\">=</span> temp<span class=\"text-code-white\">;</span>\n        \n        <span class=\"text-gray-400\">// we reverse the order because the right partition is in decreasing order</span>\n        <span class=\"text-code-blue\">reverse</span><span class=\"text-code-white\">(</span>cArr<span class=\"text-code-white\">,</span> i<span class=\"text-code-white\">,</span> n<span class=\"\">-</span><span class=\"\">1</span><span class=\"text-code-white\">)</span><span class=\"text-code-white\">;</span>\n        \n        <span class=\"\">String</span> str <span class=\"\">=</span> <span class=\"\">String</span><span class=\"text-code-white\">.</span><span class=\"text-code-blue\">valueOf</span><span class=\"text-code-white\">(</span>cArr<span class=\"text-code-white\">)</span><span class=\"text-code-white\">;</span>\n        \n        <span class=\"text-code-purple\">if</span> <span class=\"text-code-white\">(</span><span class=\"\">Long</span><span class=\"text-code-white\">.</span><span class=\"text-code-blue\">parseLong</span><span class=\"text-code-white\">(</span>str<span class=\"text-code-white\">)</span> <span class=\"\">&gt;</span> <span class=\"\">Integer</span><span class=\"text-code-white\">.</span>MAX_VALUE<span class=\"text-code-white\">)</span> <span class=\"text-code-purple\">return</span> <span class=\"\">-</span><span class=\"\">1</span><span class=\"text-code-white\">;</span>\n        <span class=\"text-code-purple\">return</span> <span class=\"\">Integer</span><span class=\"text-code-white\">.</span><span class=\"text-code-blue\">parseInt</span><span class=\"text-code-white\">(</span>str<span class=\"text-code-white\">)</span><span class=\"text-code-white\">;</span>\n    <span class=\"text-code-white\">}</span>\n    \n    <span class=\"text-gray-400\">// reverse array based on start and end position </span>\n    <span class=\"text-code-purple\">public</span> <span class=\"text-code-purple\">void</span> <span class=\"text-code-blue\">reverse</span><span class=\"text-code-white\">(</span><span class=\"text-code-purple\">char</span><span class=\"text-code-white\">[</span><span class=\"text-code-white\">]</span> input<span class=\"text-code-white\">,</span> <span class=\"text-code-purple\">int</span> start<span class=\"text-code-white\">,</span> <span class=\"text-code-purple\">int</span> end<span class=\"text-code-white\">)</span> <span class=\"text-code-white\">{</span>\n        <span class=\"text-code-purple\">while</span> <span class=\"text-code-white\">(</span>end <span class=\"\">&gt;</span> start<span class=\"text-code-white\">)</span> <span class=\"text-code-white\">{</span> <span class=\"text-gray-400\">// both crosses</span>\n            <span class=\"text-code-purple\">char</span> temp <span class=\"\">=</span> input<span class=\"text-code-white\">[</span>start<span class=\"text-code-white\">]</span><span class=\"text-code-white\">;</span>\n            input<span class=\"text-code-white\">[</span>start<span class=\"text-code-white\">]</span> <span class=\"\">=</span> input<span class=\"text-code-white\">[</span>end<span class=\"text-code-white\">]</span><span class=\"text-code-white\">;</span>\n            input<span class=\"text-code-white\">[</span>end<span class=\"text-code-white\">]</span> <span class=\"\">=</span> temp<span class=\"text-code-white\">;</span>\n            start<span class=\"\">++</span><span class=\"text-code-white\">;</span>\n            end<span class=\"\">--</span><span class=\"text-code-white\">;</span>\n        <span class=\"text-code-white\">}</span>\n    <span class=\"text-code-white\">}</span>\n<span class=\"text-code-white\">}</span>\n</code></pre><br/>","scope":{}},"wordCount":821,"readingTime":4,"title":"Leetcode 556: Next Greater Element III","section":"blog","date":"2021-07-07","tags":["Leetcode","Two Pointers"]}},"__N_SSG":true}