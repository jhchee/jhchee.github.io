{"pageProps":{"postData":{"toc":[{"indentLevel":3,"link":"#straight-outta-my-head-solution","headerRef":"h_0","title":"\"Straight outta my head\" solution"},{"indentLevel":3,"link":"#bucket-sort-is-the-answer","headerRef":"h_1","title":"Bucket sort is the answer"}],"slug":"leetcode-164-maximum-gap","source":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://leetcode.com/problems/maximum-gap/\"\n  }, \"https://leetcode.com/problems/maximum-gap/\")), mdx(\"h3\", {\n    \"id\": \"straight-outta-my-head-solution\",\n    \"className\": \"header\",\n    \"header-ref\": \"h_0\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#straight-outta-my-head-solution\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"icon icon-link\"\n  })), \"\\\"Straight outta my head\\\" solution\"), mdx(\"p\", null, \"First sort given array, then iterate the sorted elements, compare each element with its next neighbours, maximum gap is the max difference out of these neighbour pairs. \"), mdx(\"p\", null, \"The complexity is the sum of cost of sort function, (at best) nlogn and n-1 times neighbour comparison, hence O(nlogn).\"), mdx(\"p\", null, \"Can we do this better?\"), mdx(\"h3\", {\n    \"id\": \"bucket-sort-is-the-answer\",\n    \"className\": \"header\",\n    \"header-ref\": \"h_1\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#bucket-sort-is-the-answer\",\n    \"aria-hidden\": \"true\",\n    \"tabIndex\": -1\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"icon icon-link\"\n  })), \"Bucket sort is the answer\"), mdx(\"p\", null, \"The rough idea of bucket sort is to place these elements into bucket that accepts certain range (the ranges are non-overlapping). The size of range in which it accepts also known as the bucket size.\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/files/324b44f8-8d32-418d-8658-b2ec820d9689.png\",\n    \"alt\": \"324b44f8-8d32-418d-8658-b2ec820d9689.png\"\n  })), mdx(\"p\", null, \"Ok, how is bucket sort related to this. Let's us first understand that there are n-1 gaps exists within given array and the sum of these gaps is precisely hi - lo of the array. Bearing this in mind, the maximum gap for the given array will be at least (hi-lo)/(n-1). We can do a simple proof by contradiction by showing that if the maximun gap is less than (hi-lo)/(n-1), given that we have n-1 gaps, the sum of the gap differences will never made up to max-min (therefore validate our statement). \"), mdx(\"p\", null, \"If we have bucket size of (hi-lo)/(n-1), we can disregard the gap of adjacent elements in the same bucket. The max gap will be obtained from the adjacent elements from distinct buckets (by noting the difference between min from current bucket and max from previous bucket).\"), mdx(\"pre\", {\n    \"className\": \"language-java\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"class\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"Solution\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"{\"), \"\\n    \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"public\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"int\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-blue\"\n  }, \"maximumGap\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"int\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"[\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"]\"), \" nums\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \")\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"{\"), \"\\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-gray-400 italic\"\n  }, \"// this is like thermometer calibration\"), \"\\n        \\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"int\"), \" min \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"=\"), \" nums\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"[\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"0\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"]\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \",\"), \" max \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"=\"), \" nums\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"[\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"0\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"]\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \",\"), \" n \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"=\"), \" nums\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \".\"), \"length\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \";\"), \"\\n        \\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"if\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"(\"), \"n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"<\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"2\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \")\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"return\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"0\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \";\"), \"\\n        \\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"for\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"int\"), \" num\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \":\"), \" nums\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \")\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"{\"), \"\\n            min \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"=\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"Math\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \".\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-blue\"\n  }, \"min\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"(\"), \"min\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \",\"), \" num\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \";\"), \"\\n            max \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"=\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"Math\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \".\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-blue\"\n  }, \"max\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"(\"), \"max\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \",\"), \" num\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \";\"), \"\\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"}\"), \"\\n        \\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-gray-400 italic\"\n  }, \"// perform bucket sort\"), \"\\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-gray-400 italic\"\n  }, \"// n is the number of bucket\"), \"\\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-gray-400 italic\"\n  }, \"// (max-min)/(n-1) is the bucket size\"), \"\\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"int\"), \" bucketSize \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"=\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"int\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \")\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"Math\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \".\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-blue\"\n  }, \"ceil\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"double\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \")\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"(\"), \"max \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"-\"), \" min\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \")\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"/\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"(\"), \"n \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"-\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"1\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \";\"), \"\\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"if\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"(\"), \"bucketSize \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"==\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"0\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \")\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"return\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"0\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \";\"), \"\\n        \\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"int\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"[\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"]\"), \" maxBucket \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"=\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"new\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"int\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"[\"), \"n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"]\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \";\"), \"\\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"int\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"[\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"]\"), \" minBucket \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"=\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"new\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"int\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"[\"), \"n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"]\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \";\"), \"\\n        \\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-gray-400 italic\"\n  }, \"// !! use max value as marker\"), \"\\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"Arrays\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \".\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-blue\"\n  }, \"fill\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"(\"), \"minBucket\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \",\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"Integer\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \".\"), \"MAX_VALUE\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \";\"), \"        \\n        \\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"for\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"int\"), \" x \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \":\"), \" nums\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \")\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"{\"), \"\\n            \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"int\"), \" idx \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"=\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"(\"), \"x \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"-\"), \" min\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \")\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"/\"), \" bucketSize\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \";\"), \"\\n            minBucket\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"[\"), \"idx\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"]\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"=\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"Math\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \".\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-blue\"\n  }, \"min\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"(\"), \"x\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \",\"), \" minBucket\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"[\"), \"idx\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"]\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \";\"), \"\\n            maxBucket\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"[\"), \"idx\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"]\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"=\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"Math\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \".\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-blue\"\n  }, \"max\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"(\"), \"x\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \",\"), \" maxBucket\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"[\"), \"idx\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"]\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \";\"), \"\\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"}\"), \"\\n        \\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"int\"), \" maxGap \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"=\"), \" bucketSize\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \";\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-gray-400 italic\"\n  }, \"// Maximum gap is always greater or equal to bucketSize\"), \"\\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"int\"), \" previous \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"=\"), \" maxBucket\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"[\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"0\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"]\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \";\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-gray-400 italic\"\n  }, \"// We always have 0th bucket because min always exist\"), \"\\n        \\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"for\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"int\"), \" i \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"=\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"1\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \";\"), \" i \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"<\"), \" n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \";\"), \" i\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"++\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \")\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"{\"), \"\\n            \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"if\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"(\"), \"minBucket\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"[\"), \"i\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"]\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"==\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"Integer\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \".\"), \"MAX_VALUE\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \")\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"continue\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \";\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-gray-400 italic\"\n  }, \"// Skip empty bucket\"), \"\\n            maxGap \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"=\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"Math\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \".\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-blue\"\n  }, \"max\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"(\"), \"maxGap\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \",\"), \" minBucket\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"[\"), \"i\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"]\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"-\"), \" previous\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \";\"), \"\\n            previous \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"\"\n  }, \"=\"), \" maxBucket\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"[\"), \"i\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"]\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \";\"), \"\\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"}\"), \"\\n        \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-purple\"\n  }, \"return\"), \" maxGap\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \";\"), \"\\n    \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"}\"), \"\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"text-code-white\"\n  }, \"}\"), \"\\n\")));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://leetcode.com/problems/maximum-gap/\">https://leetcode.com/problems/maximum-gap/</a></p><h3 id=\"straight-outta-my-head-solution\" class=\"header\" header-ref=\"h_0\"><a href=\"#straight-outta-my-head-solution\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>&quot;Straight outta my head&quot; solution</h3><p>First sort given array, then iterate the sorted elements, compare each element with its next neighbours, maximum gap is the max difference out of these neighbour pairs. </p><p>The complexity is the sum of cost of sort function, (at best) nlogn and n-1 times neighbour comparison, hence O(nlogn).</p><p>Can we do this better?</p><h3 id=\"bucket-sort-is-the-answer\" class=\"header\" header-ref=\"h_1\"><a href=\"#bucket-sort-is-the-answer\" aria-hidden=\"true\" tabindex=\"-1\"><span class=\"icon icon-link\"></span></a>Bucket sort is the answer</h3><p>The rough idea of bucket sort is to place these elements into bucket that accepts certain range (the ranges are non-overlapping). The size of range in which it accepts also known as the bucket size.</p><p><img src=\"/files/324b44f8-8d32-418d-8658-b2ec820d9689.png\" alt=\"324b44f8-8d32-418d-8658-b2ec820d9689.png\"/></p><p>Ok, how is bucket sort related to this. Let&#x27;s us first understand that there are n-1 gaps exists within given array and the sum of these gaps is precisely hi - lo of the array. Bearing this in mind, the maximum gap for the given array will be at least (hi-lo)/(n-1). We can do a simple proof by contradiction by showing that if the maximun gap is less than (hi-lo)/(n-1), given that we have n-1 gaps, the sum of the gap differences will never made up to max-min (therefore validate our statement). </p><p>If we have bucket size of (hi-lo)/(n-1), we can disregard the gap of adjacent elements in the same bucket. The max gap will be obtained from the adjacent elements from distinct buckets (by noting the difference between min from current bucket and max from previous bucket).</p><pre class=\"language-java\"><code class=\"language-java\"><span class=\"text-code-purple\">class</span> <span class=\"\">Solution</span> <span class=\"text-code-white\">{</span>\n    <span class=\"text-code-purple\">public</span> <span class=\"text-code-purple\">int</span> <span class=\"text-code-blue\">maximumGap</span><span class=\"text-code-white\">(</span><span class=\"text-code-purple\">int</span><span class=\"text-code-white\">[</span><span class=\"text-code-white\">]</span> nums<span class=\"text-code-white\">)</span> <span class=\"text-code-white\">{</span>\n        <span class=\"text-gray-400 italic\">// this is like thermometer calibration</span>\n        \n        <span class=\"text-code-purple\">int</span> min <span class=\"\">=</span> nums<span class=\"text-code-white\">[</span><span class=\"\">0</span><span class=\"text-code-white\">]</span><span class=\"text-code-white\">,</span> max <span class=\"\">=</span> nums<span class=\"text-code-white\">[</span><span class=\"\">0</span><span class=\"text-code-white\">]</span><span class=\"text-code-white\">,</span> n <span class=\"\">=</span> nums<span class=\"text-code-white\">.</span>length<span class=\"text-code-white\">;</span>\n        \n        <span class=\"text-code-purple\">if</span> <span class=\"text-code-white\">(</span>n<span class=\"\">&lt;</span><span class=\"\">2</span><span class=\"text-code-white\">)</span> <span class=\"text-code-purple\">return</span> <span class=\"\">0</span><span class=\"text-code-white\">;</span>\n        \n        <span class=\"text-code-purple\">for</span> <span class=\"text-code-white\">(</span><span class=\"text-code-purple\">int</span> num<span class=\"\">:</span> nums<span class=\"text-code-white\">)</span> <span class=\"text-code-white\">{</span>\n            min <span class=\"\">=</span> <span class=\"\">Math</span><span class=\"text-code-white\">.</span><span class=\"text-code-blue\">min</span><span class=\"text-code-white\">(</span>min<span class=\"text-code-white\">,</span> num<span class=\"text-code-white\">)</span><span class=\"text-code-white\">;</span>\n            max <span class=\"\">=</span> <span class=\"\">Math</span><span class=\"text-code-white\">.</span><span class=\"text-code-blue\">max</span><span class=\"text-code-white\">(</span>max<span class=\"text-code-white\">,</span> num<span class=\"text-code-white\">)</span><span class=\"text-code-white\">;</span>\n        <span class=\"text-code-white\">}</span>\n        \n        <span class=\"text-gray-400 italic\">// perform bucket sort</span>\n        <span class=\"text-gray-400 italic\">// n is the number of bucket</span>\n        <span class=\"text-gray-400 italic\">// (max-min)/(n-1) is the bucket size</span>\n        <span class=\"text-code-purple\">int</span> bucketSize <span class=\"\">=</span> <span class=\"text-code-white\">(</span><span class=\"text-code-purple\">int</span><span class=\"text-code-white\">)</span> <span class=\"\">Math</span><span class=\"text-code-white\">.</span><span class=\"text-code-blue\">ceil</span><span class=\"text-code-white\">(</span><span class=\"text-code-white\">(</span><span class=\"text-code-purple\">double</span><span class=\"text-code-white\">)</span> <span class=\"text-code-white\">(</span>max <span class=\"\">-</span> min<span class=\"text-code-white\">)</span> <span class=\"\">/</span> <span class=\"text-code-white\">(</span>n <span class=\"\">-</span> <span class=\"\">1</span><span class=\"text-code-white\">)</span><span class=\"text-code-white\">)</span><span class=\"text-code-white\">;</span>\n        <span class=\"text-code-purple\">if</span> <span class=\"text-code-white\">(</span>bucketSize <span class=\"\">==</span> <span class=\"\">0</span><span class=\"text-code-white\">)</span> <span class=\"text-code-purple\">return</span> <span class=\"\">0</span><span class=\"text-code-white\">;</span>\n        \n        <span class=\"text-code-purple\">int</span><span class=\"text-code-white\">[</span><span class=\"text-code-white\">]</span> maxBucket <span class=\"\">=</span> <span class=\"text-code-purple\">new</span> <span class=\"text-code-purple\">int</span><span class=\"text-code-white\">[</span>n<span class=\"text-code-white\">]</span><span class=\"text-code-white\">;</span>\n        <span class=\"text-code-purple\">int</span><span class=\"text-code-white\">[</span><span class=\"text-code-white\">]</span> minBucket <span class=\"\">=</span> <span class=\"text-code-purple\">new</span> <span class=\"text-code-purple\">int</span><span class=\"text-code-white\">[</span>n<span class=\"text-code-white\">]</span><span class=\"text-code-white\">;</span>\n        \n        <span class=\"text-gray-400 italic\">// !! use max value as marker</span>\n        <span class=\"\">Arrays</span><span class=\"text-code-white\">.</span><span class=\"text-code-blue\">fill</span><span class=\"text-code-white\">(</span>minBucket<span class=\"text-code-white\">,</span> <span class=\"\">Integer</span><span class=\"text-code-white\">.</span>MAX_VALUE<span class=\"text-code-white\">)</span><span class=\"text-code-white\">;</span>        \n        \n        <span class=\"text-code-purple\">for</span> <span class=\"text-code-white\">(</span><span class=\"text-code-purple\">int</span> x <span class=\"\">:</span> nums<span class=\"text-code-white\">)</span> <span class=\"text-code-white\">{</span>\n            <span class=\"text-code-purple\">int</span> idx <span class=\"\">=</span> <span class=\"text-code-white\">(</span>x <span class=\"\">-</span> min<span class=\"text-code-white\">)</span> <span class=\"\">/</span> bucketSize<span class=\"text-code-white\">;</span>\n            minBucket<span class=\"text-code-white\">[</span>idx<span class=\"text-code-white\">]</span> <span class=\"\">=</span> <span class=\"\">Math</span><span class=\"text-code-white\">.</span><span class=\"text-code-blue\">min</span><span class=\"text-code-white\">(</span>x<span class=\"text-code-white\">,</span> minBucket<span class=\"text-code-white\">[</span>idx<span class=\"text-code-white\">]</span><span class=\"text-code-white\">)</span><span class=\"text-code-white\">;</span>\n            maxBucket<span class=\"text-code-white\">[</span>idx<span class=\"text-code-white\">]</span> <span class=\"\">=</span> <span class=\"\">Math</span><span class=\"text-code-white\">.</span><span class=\"text-code-blue\">max</span><span class=\"text-code-white\">(</span>x<span class=\"text-code-white\">,</span> maxBucket<span class=\"text-code-white\">[</span>idx<span class=\"text-code-white\">]</span><span class=\"text-code-white\">)</span><span class=\"text-code-white\">;</span>\n        <span class=\"text-code-white\">}</span>\n        \n        <span class=\"text-code-purple\">int</span> maxGap <span class=\"\">=</span> bucketSize<span class=\"text-code-white\">;</span> <span class=\"text-gray-400 italic\">// Maximum gap is always greater or equal to bucketSize</span>\n        <span class=\"text-code-purple\">int</span> previous <span class=\"\">=</span> maxBucket<span class=\"text-code-white\">[</span><span class=\"\">0</span><span class=\"text-code-white\">]</span><span class=\"text-code-white\">;</span> <span class=\"text-gray-400 italic\">// We always have 0th bucket because min always exist</span>\n        \n        <span class=\"text-code-purple\">for</span> <span class=\"text-code-white\">(</span><span class=\"text-code-purple\">int</span> i <span class=\"\">=</span> <span class=\"\">1</span><span class=\"text-code-white\">;</span> i <span class=\"\">&lt;</span> n<span class=\"text-code-white\">;</span> i<span class=\"\">++</span><span class=\"text-code-white\">)</span> <span class=\"text-code-white\">{</span>\n            <span class=\"text-code-purple\">if</span> <span class=\"text-code-white\">(</span>minBucket<span class=\"text-code-white\">[</span>i<span class=\"text-code-white\">]</span> <span class=\"\">==</span> <span class=\"\">Integer</span><span class=\"text-code-white\">.</span>MAX_VALUE<span class=\"text-code-white\">)</span> <span class=\"text-code-purple\">continue</span><span class=\"text-code-white\">;</span> <span class=\"text-gray-400 italic\">// Skip empty bucket</span>\n            maxGap <span class=\"\">=</span> <span class=\"\">Math</span><span class=\"text-code-white\">.</span><span class=\"text-code-blue\">max</span><span class=\"text-code-white\">(</span>maxGap<span class=\"text-code-white\">,</span> minBucket<span class=\"text-code-white\">[</span>i<span class=\"text-code-white\">]</span> <span class=\"\">-</span> previous<span class=\"text-code-white\">)</span><span class=\"text-code-white\">;</span>\n            previous <span class=\"\">=</span> maxBucket<span class=\"text-code-white\">[</span>i<span class=\"text-code-white\">]</span><span class=\"text-code-white\">;</span>\n        <span class=\"text-code-white\">}</span>\n        <span class=\"text-code-purple\">return</span> maxGap<span class=\"text-code-white\">;</span>\n    <span class=\"text-code-white\">}</span>\n<span class=\"text-code-white\">}</span>\n</code></pre>","scope":{}},"wordCount":422,"readingTime":2,"title":"Leetcode 164: Maximum Gap","date":"2021-07-06","description":"Solving leetcode #164","tags":["Leetcode","Pigeonhole Principle"]}},"__N_SSG":true}